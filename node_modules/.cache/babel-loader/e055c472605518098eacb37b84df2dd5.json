{"ast":null,"code":"import _objectSpread from \"/home/user/public_html/todoRedux/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { ADD, UPDATE, SUBTRACT } from \"../constants\";\nlet id_increment = 0;\nconst initialstate = {\n  taskList: []\n};\n\nconst helpUpdate = (taskId, taskValue, taskList) => ({\n  taskList: [...taskList.slice(0, taskId), _objectSpread({}, taskList[taskId], {\n    task: taskValue\n  }), ...taskList.slice(taskId + 1, taskList.length)]\n});\n\nconst TaskReducer = (state = initialstate, action) => {\n  switch (action.type) {\n    case ADD:\n      state = {\n        taskList: [...state.taskList, {\n          task: '',\n          id: id_increment\n        }]\n      };\n      id_increment = id_increment + 1;\n      return state;\n\n    case SUBTRACT:\n      // let tgIndex = state.taskList.findIndex(element => state.TaskId  == element.id);\n      let targetIndex = state.taskList.findIndex(element => action.id_tarefa === element.id); // console.log(targetIndex)\n\n      state = {\n        taskList: [...state.taskList.slice(0, targetIndex), ...state.taskList.slice(targetIndex + 1, state.taskList.length)]\n      };\n      return state;\n\n    case UPDATE:\n      console.log(state); // let inputIndex = state.taskList.findIndex(element => action.taskId === element.id);\n\n      return helpUpdate(action.taskId, action.taskValue, state.taskList);\n    // state = {\n    //   taskList: [\n    //   ...state.taskList.slice(0,inputIndex),\n    //   {id:action.taskId, task},\n    //   ...toUpdate.slice(targetIndex+1, toUpdate.length)\n    // ]}\n\n    default:\n      return state;\n  }\n};\n\nexport default TaskReducer;","map":{"version":3,"sources":["/home/user/public_html/todoRedux/src/reducers/taskReducer.js"],"names":["ADD","UPDATE","SUBTRACT","id_increment","initialstate","taskList","helpUpdate","taskId","taskValue","slice","task","length","TaskReducer","state","action","type","id","targetIndex","findIndex","element","id_tarefa","console","log"],"mappings":";AAAA,SAASA,GAAT,EAAcC,MAAd,EAAsBC,QAAtB,QAAsC,cAAtC;AACA,IAAIC,YAAY,GAAC,CAAjB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE;AADS,CAArB;;AAIA,MAAMC,UAAU,GAAG,CAACC,MAAD,EAASC,SAAT,EAAoBH,QAApB,MAAkC;AACnDA,EAAAA,QAAQ,EAAE,CACR,GAAGA,QAAQ,CAACI,KAAT,CAAe,CAAf,EAAkBF,MAAlB,CADK,oBAEJF,QAAQ,CAACE,MAAD,CAFJ;AAEcG,IAAAA,IAAI,EAACF;AAFnB,MAGR,GAAGH,QAAQ,CAACI,KAAT,CAAeF,MAAM,GAAC,CAAtB,EAAyBF,QAAQ,CAACM,MAAlC,CAHK;AADyC,CAAlC,CAAnB;;AAQA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAACT,YAAP,EAAqBU,MAArB,KAAgC;AAChD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKf,GAAL;AACEa,MAAAA,KAAK,GAAG;AACNR,QAAAA,QAAQ,EAAE,CACR,GAAGQ,KAAK,CAACR,QADD,EAER;AAACK,UAAAA,IAAI,EAAE,EAAP;AAAWM,UAAAA,EAAE,EAAEb;AAAf,SAFQ;AADJ,OAAR;AAMAA,MAAAA,YAAY,GAACA,YAAY,GAAC,CAA1B;AACA,aAAOU,KAAP;;AAGF,SAAKX,QAAL;AACE;AACA,UAAIe,WAAW,GAAGJ,KAAK,CAACR,QAAN,CAAea,SAAf,CAAyBC,OAAO,IAAIL,MAAM,CAACM,SAAP,KAAqBD,OAAO,CAACH,EAAjE,CAAlB,CAFF,CAGE;;AACAH,MAAAA,KAAK,GAAG;AACNR,QAAAA,QAAQ,EAAE,CACR,GAAGQ,KAAK,CAACR,QAAN,CAAeI,KAAf,CAAqB,CAArB,EAAwBQ,WAAxB,CADK,EAER,GAAGJ,KAAK,CAACR,QAAN,CAAeI,KAAf,CAAqBQ,WAAW,GAAC,CAAjC,EAAoCJ,KAAK,CAACR,QAAN,CAAeM,MAAnD,CAFK;AADJ,OAAR;AAOA,aAAOE,KAAP;;AAEF,SAAKZ,MAAL;AACEoB,MAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ,EADF,CAEE;;AACA,aAAOP,UAAU,CAACQ,MAAM,CAACP,MAAR,EAAgBO,MAAM,CAACN,SAAvB,EAAkCK,KAAK,CAACR,QAAxC,CAAjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAGF;AACE,aAAOQ,KAAP;AAtCJ;AAwCD,CAzCH;;AA0CE,eAAeD,WAAf","sourcesContent":["import { ADD, UPDATE, SUBTRACT } from \"../constants\";\nlet id_increment=0;\n\nconst initialstate = {\n  taskList: []\n}\n\nconst helpUpdate = (taskId, taskValue, taskList) => ({\n  taskList: [\n    ...taskList.slice(0, taskId),\n    {...taskList[taskId], task:taskValue},\n    ...taskList.slice(taskId+1, taskList.length)\n  ],\n})\n\nconst TaskReducer = (state=initialstate, action) => {\n    switch (action.type) {\n      case ADD:\n        state = {\n          taskList: [\n            ...state.taskList,\n            {task: '', id: id_increment}\n          ],\n        };\n        id_increment=id_increment+1;\n        return state;\n\n\n      case SUBTRACT:\n        // let tgIndex = state.taskList.findIndex(element => state.TaskId  == element.id);\n        let targetIndex = state.taskList.findIndex(element => action.id_tarefa === element.id);\n        // console.log(targetIndex)\n        state = {\n          taskList: [\n            ...state.taskList.slice(0, targetIndex),\n            ...state.taskList.slice(targetIndex+1, state.taskList.length)\n          ],\n        };\n\n        return state;\n\n      case UPDATE:\n        console.log(state)\n        // let inputIndex = state.taskList.findIndex(element => action.taskId === element.id);\n        return helpUpdate(action.taskId, action.taskValue, state.taskList)\n        // state = {\n        //   taskList: [\n        //   ...state.taskList.slice(0,inputIndex),\n        //   {id:action.taskId, task},\n        //   ...toUpdate.slice(targetIndex+1, toUpdate.length)\n        // ]}\n\n\n      default:\n        return state;\n    }\n  };\n  export default TaskReducer;"]},"metadata":{},"sourceType":"module"}