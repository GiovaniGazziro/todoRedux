{"ast":null,"code":"import { ADD, UPDATE, SUBTRACT } from \"../constants\";\n\nconst TaskReducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD\":\n      const taskList = action.taskList;\n      state = {\n        taskList: [...taskList, {\n          task: '',\n          id: action.id_increment\n        }]\n      };\n      action.id_increment = action.id_increment + 1;\n      return state;\n\n    case \"UPDATE\":\n      const toUpdate = action.taskList;\n      const task = action.task;\n      let targetIndex = toUpdate.findIndex(element => action.taskId === element.id);\n      state = {\n        toUpdate: [...toUpdate.slice(0, targetIndex), {\n          id: action.taskId,\n          task\n        }, ...toUpdate.slice(targetIndex + 1, toUpdate.length)]\n      };\n      return state;\n\n    case \"REMOVE\":\n      let tgIndex = action.taskList.findIndex(element => action.taskId === element.id);\n      let tsList = action.taskList;\n      state = {\n        tsList: [...tsList.slice(0, tgIndex), ...tsList.slice(tgIndex + 1, tsList.length)]\n      };\n      return state;\n\n    default:\n      break;\n  }\n};\n\nexport default TaskReducer;","map":{"version":3,"sources":["/home/user/public_html/todoRedux/src/reducers/taskReducer.js"],"names":["ADD","UPDATE","SUBTRACT","TaskReducer","state","action","type","taskList","task","id","id_increment","toUpdate","targetIndex","findIndex","element","taskId","slice","length","tgIndex","tsList"],"mappings":"AAAA,SAASA,GAAT,EAAcC,MAAd,EAAsBC,QAAtB,QAAsC,cAAtC;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,KAAL;AACE,YAAMC,QAAQ,GAAGF,MAAM,CAACE,QAAxB;AACAH,MAAAA,KAAK,GAAG;AACNG,QAAAA,QAAQ,EAAE,CACR,GAAGA,QADK,EAER;AAACC,UAAAA,IAAI,EAAE,EAAP;AAAWC,UAAAA,EAAE,EAAEJ,MAAM,CAACK;AAAtB,SAFQ;AADJ,OAAR;AAMAL,MAAAA,MAAM,CAACK,YAAP,GAAoBL,MAAM,CAACK,YAAP,GAAoB,CAAxC;AACA,aAAON,KAAP;;AAEF,SAAK,QAAL;AACE,YAAMO,QAAQ,GAAGN,MAAM,CAACE,QAAxB;AACA,YAAMC,IAAI,GAAGH,MAAM,CAACG,IAApB;AACA,UAAII,WAAW,GAAGD,QAAQ,CAACE,SAAT,CAAmBC,OAAO,IAAIT,MAAM,CAACU,MAAP,KAAkBD,OAAO,CAACL,EAAxD,CAAlB;AAEAL,MAAAA,KAAK,GAAG;AAACO,QAAAA,QAAQ,EAAE,CACjB,GAAGA,QAAQ,CAACK,KAAT,CAAe,CAAf,EAAiBJ,WAAjB,CADc,EAEjB;AAACH,UAAAA,EAAE,EAACJ,MAAM,CAACU,MAAX;AAAmBP,UAAAA;AAAnB,SAFiB,EAGjB,GAAGG,QAAQ,CAACK,KAAT,CAAeJ,WAAW,GAAC,CAA3B,EAA8BD,QAAQ,CAACM,MAAvC,CAHc;AAAX,OAAR;AAKA,aAAOb,KAAP;;AAEF,SAAK,QAAL;AACE,UAAIc,OAAO,GAAGb,MAAM,CAACE,QAAP,CAAgBM,SAAhB,CAA0BC,OAAO,IAAIT,MAAM,CAACU,MAAP,KAAkBD,OAAO,CAACL,EAA/D,CAAd;AACA,UAAIU,MAAM,GAAGd,MAAM,CAACE,QAApB;AACAH,MAAAA,KAAK,GAAG;AAACe,QAAAA,MAAM,EAAE,CACf,GAAGA,MAAM,CAACH,KAAP,CAAa,CAAb,EAAeE,OAAf,CADY,EAEf,GAAGC,MAAM,CAACH,KAAP,CAAaE,OAAO,GAAC,CAArB,EAAwBC,MAAM,CAACF,MAA/B,CAFY;AAAT,OAAR;AAKA,aAAOb,KAAP;;AAGF;AACA;AApCF;AAsCD,CAvCH;;AAwCE,eAAeD,WAAf","sourcesContent":["import { ADD, UPDATE, SUBTRACT } from \"../constants\";\n\nconst TaskReducer = (state, action) => {\n    switch (action.type) {\n      case \"ADD\":\n        const taskList = action.taskList\n        state = {\n          taskList: [\n            ...taskList,\n            {task: '', id: action.id_increment}\n          ],\n        };\n        action.id_increment=action.id_increment+1;\n        return state;\n\n      case \"UPDATE\":\n        const toUpdate = action.taskList\n        const task = action.task\n        let targetIndex = toUpdate.findIndex(element => action.taskId === element.id);\n\n        state = {toUpdate: [\n          ...toUpdate.slice(0,targetIndex),\n          {id:action.taskId, task},\n          ...toUpdate.slice(targetIndex+1, toUpdate.length)\n        ]}\n        return state;\n\n      case \"REMOVE\":\n        let tgIndex = action.taskList.findIndex(element => action.taskId === element.id);\n        let tsList = action.taskList\n        state = {tsList: [\n          ...tsList.slice(0,tgIndex),\n          ...tsList.slice(tgIndex+1, tsList.length)\n        ]}\n\n        return state;\n\n\n      default:\n      break;\n    }\n  };\n  export default TaskReducer;"]},"metadata":{},"sourceType":"module"}