{"ast":null,"code":"import { ADD, UPDATE, SUBTRACT } from \"../constants\";\nlet id_increment = 0;\nconst initialstate = {\n  taskList: []\n};\n\nconst TaskReducer = (state = initialstate, action) => {\n  switch (action.type) {\n    case ADD:\n      state = {\n        taskList: [...state.taskList, {\n          task: '',\n          id: id_increment\n        }]\n      };\n      id_increment = id_increment + 1;\n      return state;\n\n    case SUBTRACT:\n      // let tgIndex = state.taskList.findIndex(element => state.TaskId  == element.id);\n      let targetIndex = state.taskList.findIndex(element => action.id_tarefa === element.id); // console.log(targetIndex)\n\n      state = {\n        taskList: [...state.taskList.slice(0, targetIndex), ...state.taskList.slice(targetIndex + 1, state.taskList.length)]\n      };\n      return state;\n\n    case UPDATE:\n      console.log(action.taskId, action.taskValue); // let inputIndex = state.taskList.findIndex(element => action.taskId === element.id);\n\n      state = {\n        taskList: [...state.taskList, {\n          task: action.taskValue,\n          id: id_increment\n        }]\n      };\n    // state = {\n    //   taskList: [\n    //   ...state.taskList.slice(0,inputIndex),\n    //   {id:action.taskId, task},\n    //   ...toUpdate.slice(targetIndex+1, toUpdate.length)\n    // ]}\n\n    default:\n      return state;\n  }\n};\n\nexport default TaskReducer;","map":{"version":3,"sources":["/home/user/public_html/todoRedux/src/reducers/taskReducer.js"],"names":["ADD","UPDATE","SUBTRACT","id_increment","initialstate","taskList","TaskReducer","state","action","type","task","id","targetIndex","findIndex","element","id_tarefa","slice","length","console","log","taskId","taskValue"],"mappings":"AAAA,SAASA,GAAT,EAAcC,MAAd,EAAsBC,QAAtB,QAAsC,cAAtC;AACA,IAAIC,YAAY,GAAC,CAAjB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE;AADS,CAArB;;AAGA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAACH,YAAP,EAAqBI,MAArB,KAAgC;AAChD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,GAAL;AACEO,MAAAA,KAAK,GAAG;AACNF,QAAAA,QAAQ,EAAE,CACR,GAAGE,KAAK,CAACF,QADD,EAER;AAACK,UAAAA,IAAI,EAAE,EAAP;AAAWC,UAAAA,EAAE,EAAER;AAAf,SAFQ;AADJ,OAAR;AAMAA,MAAAA,YAAY,GAACA,YAAY,GAAC,CAA1B;AACA,aAAOI,KAAP;;AAGF,SAAKL,QAAL;AACE;AACA,UAAIU,WAAW,GAAGL,KAAK,CAACF,QAAN,CAAeQ,SAAf,CAAyBC,OAAO,IAAIN,MAAM,CAACO,SAAP,KAAqBD,OAAO,CAACH,EAAjE,CAAlB,CAFF,CAGE;;AACAJ,MAAAA,KAAK,GAAG;AACNF,QAAAA,QAAQ,EAAE,CACR,GAAGE,KAAK,CAACF,QAAN,CAAeW,KAAf,CAAqB,CAArB,EAAwBJ,WAAxB,CADK,EAER,GAAGL,KAAK,CAACF,QAAN,CAAeW,KAAf,CAAqBJ,WAAW,GAAC,CAAjC,EAAoCL,KAAK,CAACF,QAAN,CAAeY,MAAnD,CAFK;AADJ,OAAR;AAOA,aAAOV,KAAP;;AAEF,SAAKN,MAAL;AACEiB,MAAAA,OAAO,CAACC,GAAR,CAAYX,MAAM,CAACY,MAAnB,EAA2BZ,MAAM,CAACa,SAAlC,EADF,CAEE;;AACAd,MAAAA,KAAK,GAAG;AACNF,QAAAA,QAAQ,EAAE,CACR,GAAGE,KAAK,CAACF,QADD,EAER;AAACK,UAAAA,IAAI,EAAEF,MAAM,CAACa,SAAd;AAAyBV,UAAAA,EAAE,EAAER;AAA7B,SAFQ;AADJ,OAAR;AAMA;AACA;AACA;AACA;AACA;AACA;;AAGF;AACE,aAAOI,KAAP;AA3CJ;AA6CD,CA9CH;;AA+CE,eAAeD,WAAf","sourcesContent":["import { ADD, UPDATE, SUBTRACT } from \"../constants\";\nlet id_increment=0;\n\nconst initialstate = {\n  taskList: []\n}\nconst TaskReducer = (state=initialstate, action) => {\n    switch (action.type) {\n      case ADD:\n        state = {\n          taskList: [\n            ...state.taskList,\n            {task: '', id: id_increment}\n          ],\n        };\n        id_increment=id_increment+1;\n        return state;\n\n\n      case SUBTRACT:\n        // let tgIndex = state.taskList.findIndex(element => state.TaskId  == element.id);\n        let targetIndex = state.taskList.findIndex(element => action.id_tarefa === element.id);\n        // console.log(targetIndex)\n        state = {\n          taskList: [\n            ...state.taskList.slice(0, targetIndex),\n            ...state.taskList.slice(targetIndex+1, state.taskList.length)\n          ],\n        };\n\n        return state;\n\n      case UPDATE:\n        console.log(action.taskId, action.taskValue)\n        // let inputIndex = state.taskList.findIndex(element => action.taskId === element.id);\n        state = {\n          taskList: [\n            ...state.taskList,\n            {task: action.taskValue, id: id_increment}\n          ],\n        };\n        // state = {\n        //   taskList: [\n        //   ...state.taskList.slice(0,inputIndex),\n        //   {id:action.taskId, task},\n        //   ...toUpdate.slice(targetIndex+1, toUpdate.length)\n        // ]}\n\n\n      default:\n        return state;\n    }\n  };\n  export default TaskReducer;"]},"metadata":{},"sourceType":"module"}